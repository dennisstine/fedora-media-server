---
# '/data' refers to the LVM that maps to /dev/mapper/fedora-root aka sda3.  This is the 4TB HDD at the time of writing.
# see notes.txt regarding a host_whitelist that needs to happen in sabnzbd for networking to work.
version: "3.8"
services:

  # clientâ€“server for movies, tv shows, etc. aka media server/homebrew netflix
  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    network_mode: host # host networking takes care of forwarding :34200
    devices:
      - /dev/dri:/dev/dri
    environment:
      - PUID=2000 # plex
      - PGID=2000 # plex
      - TZ=America/Chicago
      - UMASK_SET=022
      - VERSION=docker
    volumes:
      # limit permissions to plex ./config, and the /data/media/{movies/tv} dirs that radarr/sonarr move completed downloads to
      - /data/configs/plex:/config # plex home - configs, appdata, etc. persistence
      - /data/media/movies:/movies # completed movie downloads requested through radarr <--> sabnzbd end up here - this is the plex 'Movies' library
      - /data/media/tv:/tv # completed tv downloads requested through sonarr <--> sabnzbd end up here - this is the plex 'TV Shows' library
    restart: unless-stopped

  # binary newsreader (usenet newsgroup client) aka downloader
  sabnzbd:
    image: ghcr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    environment:
      - PUID=2000 # plex
      - PGID=2000 # plex
      - TZ=America/Chicago
    volumes:
      # limit permissions to sabnzbd ./config, and incoming/usenet/{complete/incomplete} for downloads until moved by radarr/sonarr
      - /data/configs/sabnzbd:/config # sabnzbd home - configs, appdata, etc. persistence
      # map the following values for sabnzbd - do not use the default /downloads and /incomplete-downloads.
      # radarr and sonarr need to know where completed downloads are (root before /tv or /movies).
      # if an volume is setup here, it has to be duplicated in radarr/sonarr below.
      - /data/incoming/usenet/complete:/data/incoming/usenet/complete # UI: Folders: Completed Download Folder: /data/incoming/usenet/complete MAP THIS.
      - /data/incoming/usenet/incomplete:/data/incoming/usenet/incomplete # UI: Folders: Temporary Download Folder: /data/incoming/usenet/incomplete  MAP THIS.
    ports:
      - "8080:8080"
    restart: unless-stopped

  # 'internet pvr' for usenet clients (movies) aka movie finder
  # add root folder in UI: /movies (storage: /data/media/movies) - enables download monitoring/completed moving to plex movies library
  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=2000 # plex
      - PGID=2000 # plex
      - TZ=America/Chicago
    volumes:
      # limit permissions to radarr ./config, sabnzbd completed dir (to move files from), the plex movies library (to move files to)
      - /data/configs/radarr:/config # radarr home - configs, appdata, etc. persistence
      - /data/incoming/usenet/complete/movies:/data/incoming/usenet/complete/movies # sabnzbd's completed directory (where to monitor for completed downloads)
      - /data/media/movies:/movies # the plex movies library directory (where radarr moves completed movies to)
    ports:
      - "7878:7878"
    restart: unless-stopped
    
  # 'internet pvr' for usenet clients (tv shows) aka tv finder
  # add root folder in UI: /tv (storage: /data/media/tv) - enables download monitoring/completed moving to plex tv library
  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=2000 # plex
      - PGID=2000 # plex
      - TZ=America/Chicago
    volumes:
      # limit permissions to sonarr ./config, sabnzbd completed dir (to move files from), the plex tv library (to move files to)
      - /data/configs/sonarr:/config # sonarr home - configs, appdata, etc. persistence
      - /data/incoming/usenet/complete/tv:/data/incoming/usenet/complete/tv # sabnzbd's completed directory (where to monitor for completed downloads)
      - /data/media/tv:/tv # the plex tv library directory (where sonarr tv completed movies to)
    ports:
      - "8989:8989"
    restart: unless-stopped

  dex:
    image: spx01/dex
    container_name: dex
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9292:8080"
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./prometheus_dex_ds.yml:/etc/grafana/provisioning/datasources/prometheus_dex_ds.yml
      - ./grafana_dashboard.json:/var/lib/grafana/dashboards/grafana_dashboard.json

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - /data/prometheus:/prometheus